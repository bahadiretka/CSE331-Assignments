{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 .data\
\
	# strings for inputs\
	size_input:  .asciiz "Please enter size of array(n): "\
	divider_input: .asciiz "Please enter divider(k): "\
	array_input: .asciiz "Please enter elements\\n" \
\
	# strings fot output\
	result_output: .asciiz "Found validated pairs : "\
.text\
	# reading size of array(n) from console\
	\
ReadN:\
\
	li $v0, 4\
    	la $a0, size_input\
    	syscall\
	li $v0 5\
	syscall\
	blt $v0 2 ReadN\
	bgt $v0 100 ReadN\
	move $t4 $v0\
\
	# reading divider(k) from console	\
ReadK:\
\
	li $v0, 4\
    	la $a0, divider_input\
    	syscall\
	li $v0 5\
	syscall\
	blt $v0 1 ReadK\
	bgt $v0 100 ReadK\
	move $t5 $v0\
	\
	# print numbers string\
	li $v0, 4\
   	la $a0, array_input\
    	syscall\
\
	# allocating dynamic memory\
	sll $a0 $v0 2     \
	li $v0 9      \
	syscall    \
\
	move $s2 $zero\
	move $t6 $v0\
	move $s1 $t6\
	move $s4 $t6\
loop:\
\
	bge $s2 $t4 start\
    	# read in and store in array\
 	li $v0 5\
 	syscall\
 	# check elements\
 	blt $v0 1 loop\
	bgt $v0 100 loop\
	sw $v0 0($t6)\
\
  	addi $s2 $s2 1\
	addi $t6 $t6 4\
    	j loop\
	\
start:\
\
	move $s0, $t4 		# $s0 = n\
	addi $s0, $s0, -1\
	addi $s1, $s1, -4\
	move $s5, $t5 		#s5 = k\
	li $s2, 0		# s2 = i\
	addi $t9, $zero, 0\
OuterFor: \
  	blt $s0, $s2, exit 	# if n less than i quit\
  	addi $s3, $s2, 1	# j = i + 1\
  	addi $s2, $s2, 1	# i = i + 1\
  	addi $s1, $s1, 4\
  	addi $s4, $s1, 0\
  	j InnerFor\
\
InnerFor:\
	blt $s0, $s3, OuterFor\
	addi $s4, $s4, 4	# s4[i++]\
	lw $t0, 0($s1)\
	lw $t1, 0($s4)\
	add $t2, $t0, $t1 	# t2 = ar[i] + ar[j]\
	div $t2, $s5\
	mfhi $t3\
	addi $s3, $s3, 1\
	beq $t3, 0, increment\
	j InnerFor\
increment:\
	addi $t9, $t9, 1\
	j InnerFor\
exit:\
	li $v0, 4\
    	la $a0, result_output\
    	syscall\
    	\
	li $v0,1\
	move $a0,$t9\
	syscall}